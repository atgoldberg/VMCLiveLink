name: Fab Plugin Builds

on:
  push:
    tags:
      - "release/*"
  workflow_dispatch:

# Need write access to repository contents to create releases and upload assets.
permissions:
  contents: write

jobs:
  build-windows:
    runs-on: [self-hosted, Windows, X64]
    defaults:
      run:
        shell: powershell
    env:
      PLUGIN_DIR: "Plugins/VMCLiveLink"
      VRM_PLUGIN_DIR: "Plugins/VRMInterchange"
      ENGINE_ROOTS: 'C:\Program Files\Epic Games\UE_5.6'
      ENGINE_VERSIONS: '5.6.0'
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true
          
      - name: Set PowerShell Execution Policy
        run: Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope Process -Force
        shell: powershell
        
      - name: Git LFS pull
        run: |
          git lfs install
          git lfs fetch --all
          git lfs pull

      - name: Ensure scripts exist
        run: |
          if (-not (Test-Path "scripts\build_fab.ps1")) {
            Write-Error "scripts/build_fab.ps1 not found. Commit the script to scripts/build_fab.ps1 or update the workflow path."
          }
          if (-not (Test-Path "scripts\add_copyright_headers.py")) {
            Write-Error "scripts/add_copyright_headers.py not found. Commit the script to scripts/add_copyright_headers.py or update the workflow path."
          }

      - name: Verify copyright headers
        run: |
          $PluginDir = $env:PLUGIN_DIR
          python "scripts\add_copyright_headers.py" $PluginDir --holder "Lifelike & Believable Animation Design, Inc." --verify

      - name: Build Fab packages (VMCLiveLink and VRMInterchange)
        run: |
          $OutputDir = "$(Resolve-Path .)\FabBuilds"
          New-Item -ItemType Directory -Path $OutputDir -Force | Out-Null

          # Split env vars into arrays and trim any stray quotes/spaces
          $EngineRoots = ($env:ENGINE_ROOTS -split ",").ForEach({ $_.Trim(' ""') })
          $EngineVers  = ($env:ENGINE_VERSIONS -split ",").ForEach({ $_.Trim(' ""') })

          $PluginDirs = @()
          if ($env:PLUGIN_DIR) { $PluginDirs += $env:PLUGIN_DIR }
          if ($env:VRM_PLUGIN_DIR) { $PluginDirs += $env:VRM_PLUGIN_DIR }

          foreach ($pd in $PluginDirs) {
            Write-Host "Building Fab package for plugin at: $pd"
            ./scripts/build_fab.ps1 -PluginDir $pd -OutputDir $OutputDir -EngineRoots $EngineRoots -EngineVersions $EngineVers
          }

      - name: Get current timestamp
        id: date
        run: echo "timestamp=$(Get-Date -Format 'yyyyMMdd-HHmmss')" >> $env:GITHUB_OUTPUT
        shell: powershell

      - name: Prepare zip files (combined and individual plugins)
        run: |
          $OutputDir = "$(Resolve-Path .)\FabBuilds"
          $ZipFiles = Get-ChildItem -Path $OutputDir -Filter '*_Fab.zip' -File -ErrorAction SilentlyContinue

          if (-not $ZipFiles -or $ZipFiles.Count -eq 0) {
            Write-Error "No Fab zip files found in $OutputDir"
            exit 1
          }

          # Use the first ENGINE_VERSIONS entry to construct a short engine folder name like "UE5.6"
          $EngineVers = ($env:ENGINE_VERSIONS -split ",").ForEach({ $_.Trim(' ""') })
          $FirstVer = $EngineVers[0]
          if ($FirstVer -match '^(\d+)\.(\d+)') {
            $ShortEngine = "UE$($matches[1]).$($matches[2])"
          } else {
            # Fallback: remove any trailing .0 and non-digit/dot chars
            $ver = $FirstVer -replace '\.0+$','' -replace '[^0-9\.]',''
            $ShortEngine = "UE$ver"
          }

          $Timestamp = '${{ steps.date.outputs.timestamp }}'
          $CombinedZip = Join-Path $OutputDir ("VRMCombined-$Timestamp.zip")
          $VMCOnlyZip = Join-Path $OutputDir ("VMCLiveLink-only-$Timestamp.zip")
          $VRMOnlyZip = Join-Path $OutputDir ("VRMInterchange-only-$Timestamp.zip")

          # === COMBINED ZIP (both plugins) ===
          $TempDirCombined = Join-Path $env:TEMP ('fabzip_combined_' + [Guid]::NewGuid().ToString())
          New-Item -ItemType Directory -Path $TempDirCombined | Out-Null

          $TargetRootCombined = Join-Path $TempDirCombined $ShortEngine
          $TargetPluginsCombined = Join-Path $TargetRootCombined 'Plugins'
          $TargetVMCLCombined = Join-Path $TargetPluginsCombined 'VMCLiveLink'
          $TargetVRMCombined  = Join-Path $TargetPluginsCombined 'VRMInterchange'

          New-Item -ItemType Directory -Path $TargetVMCLCombined -Force | Out-Null
          New-Item -ItemType Directory -Path $TargetVRMCombined  -Force | Out-Null

          foreach ($z in $ZipFiles) {
            if ($z.Name -match 'VRMInterchange') {
              Write-Host "Extracting $($z.Name) to $TargetVRMCombined"
              Expand-Archive -Path $z.FullName -DestinationPath $TargetVRMCombined -Force
            } elseif ($z.Name -match 'VMCLiveLink') {
              Write-Host "Extracting $($z.Name) to $TargetVMCLCombined"
              Expand-Archive -Path $z.FullName -DestinationPath $TargetVMCLCombined -Force
            } else {
              Write-Warning "Zip $($z.Name) did not match a known plugin; extracting to Plugins root"
              Expand-Archive -Path $z.FullName -DestinationPath $TargetPluginsCombined -Force
            }
          }

          # Copy ThirdParty folder from source VRMInterchange to the combined zip
          $SourceThirdParty = Join-Path (Resolve-Path .) "$($env:VRM_PLUGIN_DIR)\ThirdParty"
          if (Test-Path $SourceThirdParty) {
            Write-Host "Copying ThirdParty folder to VRMInterchange in combined zip"
            $DestThirdParty = Join-Path $TargetVRMCombined 'ThirdParty'
            Copy-Item -Path $SourceThirdParty -Destination $DestThirdParty -Recurse -Force
          } else {
            Write-Warning "ThirdParty folder not found at $SourceThirdParty"
          }

          if (Test-Path $CombinedZip) { Remove-Item $CombinedZip -Force }
          Compress-Archive -Path (Join-Path $TempDirCombined '*') -DestinationPath $CombinedZip -Force
          Remove-Item -Path $TempDirCombined -Recurse -Force

          # === VMCLiveLink-only ZIP ===
          $TempDirVMC = Join-Path $env:TEMP ('fabzip_vmc_' + [Guid]::NewGuid().ToString())
          New-Item -ItemType Directory -Path $TempDirVMC | Out-Null

          $TargetRootVMC = Join-Path $TempDirVMC $ShortEngine
          $TargetPluginsVMC = Join-Path $TargetRootVMC 'Plugins'
          $TargetVMCLVMC = Join-Path $TargetPluginsVMC 'VMCLiveLink'

          New-Item -ItemType Directory -Path $TargetVMCLVMC -Force | Out-Null

          foreach ($z in $ZipFiles) {
            if ($z.Name -match 'VMCLiveLink' -and $z.Name -notmatch 'VRMInterchange') {
              Write-Host "Extracting $($z.Name) to $TargetVMCLVMC for VMCLiveLink-only zip"
              Expand-Archive -Path $z.FullName -DestinationPath $TargetVMCLVMC -Force
            }
          }

          if (Test-Path $VMCOnlyZip) { Remove-Item $VMCOnlyZip -Force }
          Compress-Archive -Path (Join-Path $TempDirVMC '*') -DestinationPath $VMCOnlyZip -Force
          Remove-Item -Path $TempDirVMC -Recurse -Force

          # === VRMInterchange-only ZIP ===
          $TempDirVRM = Join-Path $env:TEMP ('fabzip_vrm_' + [Guid]::NewGuid().ToString())
          New-Item -ItemType Directory -Path $TempDirVRM | Out-Null

          $TargetRootVRM = Join-Path $TempDirVRM $ShortEngine
          $TargetPluginsVRM = Join-Path $TargetRootVRM 'Plugins'
          $TargetVRMVRM = Join-Path $TargetPluginsVRM 'VRMInterchange'

          New-Item -ItemType Directory -Path $TargetVRMVRM -Force | Out-Null

          foreach ($z in $ZipFiles) {
            if ($z.Name -match 'VRMInterchange') {
              Write-Host "Extracting $($z.Name) to $TargetVRMVRM for VRMInterchange-only zip"
              Expand-Archive -Path $z.FullName -DestinationPath $TargetVRMVRM -Force
            }
          }

          # Copy ThirdParty folder from source VRMInterchange to the VRM-only zip
          if (Test-Path $SourceThirdParty) {
            Write-Host "Copying ThirdParty folder to VRMInterchange in VRM-only zip"
            $DestThirdPartyVRM = Join-Path $TargetVRMVRM 'ThirdParty'
            Copy-Item -Path $SourceThirdParty -Destination $DestThirdPartyVRM -Recurse -Force
          } else {
            Write-Warning "ThirdParty folder not found at $SourceThirdParty"
          }

          if (Test-Path $VRMOnlyZip) { Remove-Item $VRMOnlyZip -Force }
          Compress-Archive -Path (Join-Path $TempDirVRM '*') -DestinationPath $VRMOnlyZip -Force
          Remove-Item -Path $TempDirVRM -Recurse -Force

      - name: Upload artifacts (all three zips)
        uses: actions/upload-artifact@v4
        with:
          name: VMCLiveLink-Packages
          path: |
            FabBuilds\VRMCombined-${{ steps.date.outputs.timestamp }}.zip
            FabBuilds\VMCLiveLink-only-${{ steps.date.outputs.timestamp }}.zip
            FabBuilds\VRMInterchange-only-${{ steps.date.outputs.timestamp }}.zip
          if-no-files-found: error

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ github.ref_name }}-run${{ github.run_number }}
          release_name: ${{ github.ref_name }}-${{ steps.date.outputs.timestamp }}
          body: "Automated release created by CI for ${{ github.ref_name }}. The run number is included in the release tag for traceability. Includes combined package (VMCLiveLink + VRMInterchange) and individual plugin packages for Fab Marketplace submission."
          draft: false
          prerelease: false

      - name: Upload release asset (Combined VRM & VMC files .zip)
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: FabBuilds\VRMCombined-${{ steps.date.outputs.timestamp }}.zip
          asset_name: VRMCombined-${{ steps.date.outputs.timestamp }}.zip
          asset_content_type: application/zip

      - name: Upload release asset (VMCLiveLink-only.zip)
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: FabBuilds\VMCLiveLink-only-${{ steps.date.outputs.timestamp }}.zip
          asset_name: VMCLiveLink-only-${{ steps.date.outputs.timestamp }}.zip
          asset_content_type: application/zip

      - name: Upload release asset (VRMInterchange-only.zip)
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: FabBuilds\VRMInterchange-only-${{ steps.date.outputs.timestamp }}.zip
          asset_name: VRMInterchange-only-${{ steps.date.outputs.timestamp }}.zip
          asset_content_type: application/zip
