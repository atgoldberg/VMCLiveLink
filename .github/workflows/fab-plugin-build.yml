name: Fab Plugin Builds

on:
  push:
    tags:
      - "release/*"
  workflow_dispatch:

# Need write access to repository contents to create releases and upload assets.
permissions:
  contents: write

jobs:
  build-windows:
    runs-on: [self-hosted, Windows, X64]
    defaults:
      run:
        shell: powershell
    env:
      PLUGIN_DIR: "Plugins/VMCLiveLink"
      ENGINE_ROOTS: 'C:\\Program Files\\Epic Games\\UE_5.6'
      ENGINE_VERSIONS: '5.6.0'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true
          
      - name: Set PowerShell Execution Policy
        run: Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope Process -Force
        shell: powershell
        
      - name: Git LFS pull
        run: |
          git lfs install
          git lfs fetch --all
          git lfs pull

      - name: Ensure scripts exist
        run: |
          if (-not (Test-Path "scripts\build_fab.ps1")) {
            Write-Error "scripts/build_fab.ps1 not found. Commit the script to scripts/build_fab.ps1 or update the workflow path."
          }
          if (-not (Test-Path "scripts\add_copyright_headers.py")) {
            Write-Error "scripts/add_copyright_headers.py not found. Commit the script to scripts/add_copyright_headers.py or update the workflow path."
          }

      - name: Verify copyright headers
        run: |
          $PluginDir = $env:PLUGIN_DIR
          python "scripts\add_copyright_headers.py" $PluginDir --holder "Lifelike & Believable Animation Design, Inc." --verify

      - name: Build Fab packages
        run: |
          $PluginDir = $env:PLUGIN_DIR
          $OutputDir = "$(Resolve-Path .)\FabBuilds"
          New-Item -ItemType Directory -Path $OutputDir -Force | Out-Null

          # Split env vars into arrays and trim any stray quotes/spaces
          $EngineRoots = ($env:ENGINE_ROOTS -split ",").ForEach({ $_.Trim(' ""') })
          $EngineVers  = ($env:ENGINE_VERSIONS -split ",").ForEach({ $_.Trim(' ""') })

          ./scripts/build_fab.ps1 -PluginDir $PluginDir -OutputDir $OutputDir -EngineRoots $EngineRoots -EngineVersions $EngineVers

      - name: Prepare single VMCLiveLink.zip
        run: |
          $OutputDir = "$(Resolve-Path .)\FabBuilds"
          $ZipFiles = Get-ChildItem -Path $OutputDir -Filter '*_Fab.zip' -File -ErrorAction SilentlyContinue

          if (-not $ZipFiles -or $ZipFiles.Count -eq 0) {
            Write-Error "No Fab zip files found in $OutputDir"
            exit 1
          }

          $FinalZip = Join-Path $OutputDir 'VMCLiveLink.zip'

          if ($ZipFiles.Count -eq 1) {
            Copy-Item -Path $ZipFiles[0].FullName -Destination $FinalZip -Force
          } else {
            # Merge multiple Fab zips into a single zip by extracting and recompressing.
            $TempDir = Join-Path $env:TEMP ('fabzip_' + [Guid]::NewGuid().ToString())
            New-Item -ItemType Directory -Path $TempDir | Out-Null

            foreach ($z in $ZipFiles) {
              Expand-Archive -Path $z.FullName -DestinationPath $TempDir -Force
            }

            if (Test-Path $FinalZip) { Remove-Item $FinalZip -Force }

            # Compress-Archive expects a wildcard to include contents of temp dir
            Compress-Archive -Path (Join-Path $TempDir '*') -DestinationPath $FinalZip -Force

            Remove-Item -Path $TempDir -Recurse -Force
          }

      - name: Upload artifact (single zip)
        uses: actions/upload-artifact@v4
        with:
          name: VMCLiveLink
          path: FabBuilds\VMCLiveLink.zip
          if-no-files-found: error

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: ${{ github.ref_name }}
          body: "Automated release created by CI for ${{ github.ref_name }}."
          draft: false
          prerelease: false

      - name: Upload release asset (VMCLiveLink.zip)
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: FabBuilds\VMCLiveLink.zip
          asset_name: VMCLiveLink.zip
          asset_content_type: application/zip
